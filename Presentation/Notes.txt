För att uppnå kravet för väl godkänt krävs även följande:
Du ska göra ytterligare en applikation, som ska vara en grafisk applikation (WPF/MAUI).
Det ska gå att navigera sig mellan två vyer. Ena vyn ska vara själva listan och den andra vyn ska vara en vy där du kan skapa och visa en produkt (du får ha dessa på två separata vyer om du så vill).
Produkten ska även innehålla värden som kategori och tillverkare. Dessa ska då vara separata klasser.
Du måste implementera interfaces.
Du måste använda dig av Service Pattern och separera ansvarsområden.
Utöver funktionalitet såsom att lägga till och visa alla produkter ska det nu även gå att uppdatera produktinformationen samt ta bort en produkt från listan. 
Du ska även se till att en produkt inte kan läggas till två gånger eller att en tom produkt kan läggas till.
Du ska skapa enhetstester som testar alla dina funktioner som du har skapat.
Lägg till en kontroll i funktionen som lägger till en produkt för att säkerställa att produkter med samma namn inte kan läggas till två gånger.
Produktinformationen ska sparas ner till en .json-fil och ska även kunna hämtas upp när programmet startar och när ny lista ska hämtas.
Du måste göra enhetstester/integrationstester för samtlig funktionalitet såsom att lägga till, visa, uppdatera, ta bort, läsa in lista, spara lista.
Du måste använda dig av Git/GitHub och använda dig av olika branches när du skapar din funktionalitet. Dina branches i GitHub får inte tas bort utan ska finnas kvar. Men den slutgiltiga inlämningen ska vara main/master-branchen.

---------------------------------------------------------------------------------
* View (XAML + code-behind): ska bara hantera utseende och användarinteraktion (knappar, menyer, UI-element).
	Databindning
* ViewModel: ska innehålla logiken (vad som händer när man klickar, laddar data, byter vy).

Element (också kallat kontroll): window, grid, button, slider, textbox etc.
På Window-elementet finns olika attribut: title, xmlns, x:Class, source (src)

public async Task<ProductServiceResult<Product>> SaveProductAsync(Product product) // MÅSTE FÅNGA UPP DATA = NULL I MAINWINDOW.XAML.CS



Branchen: 
Refactor: rename Class Library Application to Assignment2.Application
Refactor: rename INavigationService to IViewNavigationService and NavigationService to ViewNavigationService


Refactor: remove GetOrCreateAsync-method from RepositoryExtensions
Refactor: remove ProductJsonRepository, CategoryJsonRepository, ManufacturerJsonRepository and corresponding interfaces
Feat(repository): add GetEntityAsync-method to JsonRepository
Feat: add ExistsAsync-method to RepositoryExtensions
Chore: add manufacturer.json and categories.json to Data-catalog
Refactor: rename ProductRequest to ProductCreateRequest
Refactor: update IRepository with GetEntityAsync and ExistsAsync
Refactor: update ProductService UpdateProductAsync 



refactor: repository restructuring and ProductService update

- Remove GetOrCreateAsync from RepositoryExtensions
- Remove ProductJsonRepository, CategoryJsonRepository, ManufacturerJsonRepository and corresponding interfaces
- Add GetEntityAsync-method to JsonRepository
- Add ExistsAsync-method to RepositoryExtensions
- Add manufacturer.json and categories.json to Data folder
- Rename ProductRequest to ProductCreateRequest
- Update IRepository with GetEntityAsync and ExistsAsync
- Update ProductService.UpdateProductAsync




ATT GÖRA:
--------------
GetOrCreateAsync
ProductService med tillverkare och kategorier
IViewNavigationService + ViewNavigationService
lägga till i saveproduct så att man inte kan lägga till en produkt som redan finns. Case-sensitive??
New sokution folder
saveproducts 
update

--> MVVM

Enhetstester xUnit 
(integrationstest Repository??)


??? Senare kan du alltid lägga till cache/minneslager, men just nu kommer det inte göra någon skillnad i din app – bara göra det svårare att förstå vad som händer.
********inte case-sensitive produkt, tillverkare, kategori så att inte två produkter kan läggast till med samma namn fast små eller stor bokstäver











Extension = säger att den här klassen riktar in sig på och agerar hjälpare (ger extra funktionalitet) till en specifik typ av klass. 
this = extension-klassen kan anropas direkt på alla objekt som implementerar IRepository<Category>, som om GetOrCreateAsync() var skapad inuti själva CategoryJsonRepository-klassen.

Helper = anses kunna användas i projektet i stort.
Vid anrop måste man skicka in objektet som inparameter - RepositoryHelpers.GetOrCreateAsync(_categoryRepository), till en fristående metod.


DDD (Domain-Driven Design)
--------------------------
Domänen:      Produkthantering (området programmet handlar om)
Entities:     Product, Category, Manufacturer. Även kallat domänens kärnmodeller. Har alltid en unik Id-property, vilket är det som gör dem till entities.
DTOs:         ProductUpdateRequest, ProductRequest (Data Transfer Object - används bara för att flytta data mellan lager, ex. UI -> ProductService)
Repositories: ProductRepository, CategoryRepository, ManufacturerRepository
Service:      ProductService (samordnar logiken)

Domain =		 Entities och Interfaces (vad systemet är). Kataloger: Project Reference: None
Application =	 Use cases och affärslogik (vad systemet gör). Project Reference: Domain
Infrastructure = Repositories och teknik (hur systemet lagrar data). Project Reference: Domain
Presentation =	 UI/MVVM (hur användaren interagerar). Project Reference: Domain