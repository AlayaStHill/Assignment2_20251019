För att uppnå kravet för väl godkänt krävs även följande:
Du ska göra ytterligare en applikation, som ska vara en grafisk applikation (WPF/MAUI).
* Det ska gå att navigera sig mellan två vyer. Ena vyn ska vara själva listan och den andra vyn ska vara en vy där du kan skapa och visa en produkt (du får ha dessa på två separata vyer om du så vill).
Produkten ska även innehålla värden som kategori och tillverkare. Dessa ska då vara separata klasser.
Du måste implementera interfaces.
Du måste använda dig av Service Pattern och separera ansvarsområden.
Utöver funktionalitet såsom att lägga till och visa alla produkter ska det nu även gå att uppdatera produktinformationen samt ta bort en produkt från listan. 
Du ska även se till att en produkt inte kan läggas till två gånger eller att en tom produkt kan läggas till.
* Du ska skapa enhetstester som testar alla dina funktioner som du har skapat.
Lägg till en kontroll i funktionen som lägger till en produkt för att säkerställa att produkter med samma namn inte kan läggas till två gånger.
Produktinformationen ska sparas ner till en .json-fil och ska även kunna hämtas upp när programmet startar och när ny lista ska hämtas.
* Du måste göra enhetstester/integrationstester för samtlig funktionalitet såsom att lägga till, visa, uppdatera, ta bort, läsa in lista, spara lista.
Du måste använda dig av Git/GitHub och använda dig av olika branches när du skapar din funktionalitet. Dina branches i GitHub får inte tas bort utan ska finnas kvar. Men den slutgiltiga inlämningen ska vara main/master-branchen.

---------------------------------------------------------------------------------

WPF-element (också kallat kontroll): window, grid, button, slider, textbox etc.
På Window-elementet finns olika attribut: title, xmlns, x:Class, source (src)



---------------------------------------------------------------
Branchen: 
Refactor - ensure that products cannot be saved with empty or zero price:
Change IProductRequest.Price from decimal to nullable decimal (decimal?), so wpf can bind empty textbox to null instead of keeping an old value. Catch null-value in Save-method and ProductService.ValidateRequest. 
Update validation in ProductEditViewModel Save-methods and ProductService.ValidateRequest to reject null or <= 0. 
Fix Price TextBox binding in ProductEdit- and AddView:
- Changed to TwoWay binding so edits update ProductData.Price
- Added UpdateSourceTrigger=PropertyChanged for immediate updates
- Added TargetNullValue='' so null values show as empty string

Fix(product): trim name before duplicate check

Redan commitat:

Refactor: change ProductEdit- and AddView button-text from Avbryt to Tillbaka.
Refactor: change HideStatusSoonAsync to ClearStatusAfterAsync.
Refactor: move status message logic (StatusMessage, StatusColor, ClearStatusAfterAsync) into StatusViewModelBase to avid repetition

fix: make Avbryt-button responsive and actually cancel refresh - clean up layout
Add CancelRefresh-method in ProductListViewModel that directly calls RefreshCommand.Cancel() and bind Avbryt-button to it for reliable cancel. 
Add await Task.Yield to let the UI render before starting the reload-work, so buttons are clickable immediately.
In PopulateProductListAsync, yield after ProductList.Clear and check ct.ThrowIfCancellationRequested() while adding items to keep UI responsive and cancelable. 

- Add LoadCommand.Execute(null). Automaticcaly load the list on startup
- Add catch (OperationCanceledException) to LoadAsync, to adress user 
- Add RefreshAsync-method to ProductListViewModel to separate load and reload-command
- Add HideStatusSoon to handle statusmeddelanden
- Add Ladda om/Avbryt-button incomplete


feat: – när du lägger till en ny funktionalitet
fix: – när du rättar ett fel
refactor: – när du omstrukturerar utan ny funktion
docs: – när du ändrar dokumentation
test: – när du lägger till eller ändrar tester

----------------------------------------------------------------------

ATT GÖRA:
--------------
Enhetstester xUnit 
(integrationstest Repository??)

Om tid: 
Få in Header i ProductListView



fix(ProductService.Helpers): update UpdateCategory- and UpdateManufacturer async with trim for correct dublettlogik?


DDD (Domain-Driven Design)
--------------------------
Domänen:      Produkthantering (området programmet handlar om)
Entities:     Product, Category, Manufacturer. Även kallat domänens kärnmodeller. Har alltid en unik Id-property, vilket är det som gör dem till entities.
DTOs:         ProductUpdateRequest, ProductRequest (Data Transfer Object - används bara för att flytta data mellan lager, ex. UI -> ProductService)
Repositories: ProductRepository, CategoryRepository, ManufacturerRepository
Service:      ProductService (samordnar logiken)

Domain =		 Entities och Interfaces (vad systemet är). Kataloger: Project Reference: None
Application =	 Use cases och affärslogik (vad systemet gör). Project Reference: Domain
Infrastructure = Repositories och teknik (hur systemet lagrar data). Project Reference: Domain
Presentation =	 UI/MVVM (hur användaren interagerar). Project Reference: Domain (Composition Root - DI-container)




xUnit:
kopiera interface + metoder i productservice. samma med fileservice och Ifileservice - detta ska testas
extensionmethods + helpers men inte readasync i filerepository
// helpers, extensionmethods testas, id visas i listvyn eller editvyn

4.	Enhetstester
•	Lägg till tester för:
•	null pris
•	0 pris
•	negativt pris
•	giltigt pris i både create och update.


Repository: tekniskt skydd (filåtkomst, skrivfel)

Service: affärslogiskt skydd (t.ex. “produkt finns redan”)

ViewModel: användarskydd (UI’t kraschar inte)


---------------------------------------------------


